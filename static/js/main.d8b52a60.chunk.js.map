{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardDeck.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","id","email","className","alt","src","CardDeck","robots","map","value","i","key","SearchBox","SearchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","app","onSearchChange","event","Searchfield","target","fetch","then","response","json","users","filteredRobot","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCDSC,G,MAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACzB,OACC,kBAAC,WAAD,KACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BJ,EAA1B,mBACpB,6BACC,4BAAKD,GACL,2BAAIE,QCOMI,EAdE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACjB,OACC,kBAAC,WAAD,KACC,yBAAKJ,UAAU,MACdI,EAAOC,KAAI,SAACC,EAAOC,GACnB,OACC,kBAAC,EAAD,CAAMC,IAAMD,EAAGT,GAAIM,EAAOG,GAAGT,GAAID,KAAMO,EAAOG,GAAGV,KAAME,MAAOK,EAAOG,GAAGR,cCI/DU,EAXG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC/B,OACE,kBAAC,WAAD,KACE,yBAAKX,UAAU,OACf,2BAAOA,UAAW,mCAAmCY,KAAK,OAAOC,YAAY,iBAAiBC,SAAUH,OCM/FI,G,MATA,SAACC,GAEd,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACvCH,EAAMI,YCeEC,E,kDAnBb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GAC3BC,KAAKC,SAAS,CAACJ,UAAU,M,+BAItB,OAA4B,IAAxBG,KAAKJ,MAAMC,SACN,4EAEJG,KAAKV,MAAMI,a,GAhBSQ,aC+CbC,E,kDAzCd,aAAe,IAAD,8BACb,gBAYDC,eAAiB,SAACC,GACnB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAO3B,SAZvC,EAAKgB,MAAQ,CACZlB,OAAQ,GACR4B,YAAa,IAJD,E,gEAQM,IAAD,OACnBE,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAC5EF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACvB,OAAQkC,S,+BAO7B,IAAD,EACuBZ,KAAKJ,MAA5BlB,EADA,EACAA,OAAQ4B,EADR,EACQA,YACTO,EAAgBnC,EAAOoC,QAAO,SAAAC,GAAW,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASX,EAAYU,kBAGpG,OAAsB,IAAlBtC,EAAOwC,OACH,uCAGN,yBAAK5C,UAAW,MAChB,wBAAIA,UAAU,MAAd,eAEA,kBAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACD,kBAAC,EAAD,CAAU1B,OAAQmC,W,GAjCJX,aCDlBiB,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SPyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.d8b52a60.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({ name, id, email }) => {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n\t\t\t\t<img alt=\"robot\" src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React, { Fragment } from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardDeck = ({robots}) =>{\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t{robots.map((value, i) => {\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<Card key= {i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n};\r\n\r\nexport default CardDeck;\r\n","import React, {Fragment} from 'react';\r\n\r\nconst SearchBox = ({SearchField, searchChange}) =>  {\r\n  return (\r\n    <Fragment>\r\n      <div className='pa2'>\r\n      <input className ='pa3 ba b--green bg-lightest-blue' type=\"text\" placeholder=\"Search a robot\" onChange={searchChange}></input>\r\n      </div>\r\n      \r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n  return (\r\n    <div style={{overflowY: 'scroll', height: '500px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\nthis.setState({hasError: true});\r\n  }\r\n\r\n  render() {\r\n   if (this.state.hasError === true) {\r\n     return <h1>Something went wrong, better luck next time!</h1>\r\n   } \r\n return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport CardDeck from '../components/CardDeck';\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nclass app extends Component{\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tSearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidMount() {\r\n\tfetch('https://jsonplaceholder.typicode.com/users').then(response =>response.json())\r\n\t.then(users => this.setState({robots: users}));\r\n}\r\n\r\n\tonSearchChange = (event) => {\r\nthis.setState({Searchfield: event.target.value})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {robots, Searchfield} = this.state;\r\n\t\tconst filteredRobot = robots.filter(robot => { return robot.name.toLowerCase().includes(Searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\tif (robots.length === 0) {\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className= 'tc'>\r\n\t\t\t\t<h1 className='f1'>Robofriends</h1>\r\n\t\t\t\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t<CardDeck robots={filteredRobot}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport default app;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './containers/App'\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}